### Predict the iCMS status for a given patient based on marker list established by Juanito et al.

# Load relevant counts and metadata
cnts = read.delim("~/Counts.csv", sep = ',', header = T, stringsAsFactors = F, row.names = "X")
Meta = read.delim("~/Patient_metadata.csv", sep = ',', header = T, stringsAsFactors = F)

# Remove counts columns that don't have patient metadata 
keep = which(colnames(cnts) %in% gsub("-",".",Meta$DNA.Tumor.Sample.Barcode))
cnts = cnts[,keep]

# Get iCMS2-3 markers: table of up/downregulated genes for iCMS2/3
markers <- read.delim("~/iCMS_markers.csv", sep = ',', header = T, stringsAsFactors = F)

# Check that we have 716 unique markers
# marker_list <- unique(c(markers$iCMS2_Up,markers$iCMS2_Down,markers$iCMS3_Up,markers$iCMS3_Down))

# Split markers by iCMS type
iCMS2 <- unique(c(markers$iCMS2_Up,markers$iCMS2_Down))
iCMS2_df <- data.frame(markers = iCMS2, status = 'iCMS2')
iCMS3 <- unique(c(markers$iCMS3_Up,markers$iCMS3_Down))
iCMS3_df <- data.frame(markers = iCMS3,status = 'iCMS3')
i2_i3 <- rbind(iCMS2_df,iCMS3_df)
i2_i3$status <- factor(i2_i3$status)

# Save dataframe
write.csv(i2_i3, file = "iCMS Markers.csv", row.names = FALSE)

icmsmarkers = i2_i3
by_status = split(icmsmarkers,icmsmarkers$status)
features = lapply(by_status, function(x){x[,1]})

# Build a counts matrix with hgnc gene symbols
library('biomaRt')
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- rownames(cnts)
g_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
# Remove duplicates introduced in the mart obj
dup = g_list$hgnc_symbol[which(duplicated(g_list$hgnc_symbol))]
g_list$dup = FALSE
g_list$dup[which(g_list$hgnc_symbol %in% dup)] <- TRUE
g_list$hgnc_symbol[which(g_list$dup == TRUE)] <- g_list$ensembl_gene_id[which(g_list$dup == TRUE)]
# 
keep = which(rownames(cnts) %in% g_list$ensembl_gene_id )
cnts = cnts[keep,]
m = match(rownames(cnts) , g_list$ensembl_gene_id)
rownames(cnts) <- g_list$hgnc_symbol[m]
#
cnts_mat <- as.matrix(cnts)

# log2-transform and quantile normalize RNA-seq counts data
cnts_mat <- limma::normalizeQuantiles(log2(cnts_mat+.25))

# Define function that centers and scales gene expression matrix so that each row
# has mean=0 and sd=1
ematAdjust <- function(emat, center = TRUE, scale = TRUE, normMethod = NULL,
                       signalFilt = 0, ...)
    {

    # check input matrix format and do relevant conversions
    if (is.data.frame(emat)) emat <- as.matrix(emat)
    if (class(emat)[1] == "ExpressionSet") emat <- Biobase::exprs(emat)
    if (!is.null(normMethod)) {
        if (normMethod %in% subData$methods.voom) {
            emat <- limma::normalizeBetweenArrays(log2(emat+.25),
                                                method=normMethod,...)
        } else {
            stopifnot(normMethod %in% subData$methods.edgeR)
            normFac <- edgeR::calcNormFactors(emat, method=normMethod, ...)
            libSize <- colSums(emat)/max(colSums(emat))
            emat <- log2(t(t(emat) * 1/(normFac * libSize))+.25)
        }
    }
    N <- ncol(emat)
    P.in <- nrow(emat)

    # data processing
    # filter low signal probes
    if (signalFilt>0) {
        signal.filter <- stats::quantile(emat, signalFilt, na.rm = TRUE)
        filterLow <- apply(emat,1, max, na.rm = TRUE) < signal.filter
        emat <- emat[!filterLow,]
        if (length(center) > 1) center <- center[!filterLow]
        if (length(scale) > 1) center <- scale[!filterLow]
    } else {
        filterLow=FALSE
    }

    # standardize
    emat <- t(scale(t(emat), scale=scale, center=center))
    P.out <- nrow(emat)
    isnorm <- NULL
    
    # Done
    return(emat)
}

cnts_mat <- ematAdjust(cnts_mat)

####### Nearest template prediction #########

# Clean cnts_mat - for distCosine 0-imputation should be tested
keepP <- stats::complete.cases(cnts_mat)
if (sum(!keepP) > 0) {
    cnts_mat <- cnts_mat[keepP,,drop = FALSE]
}

# Clean markers df
keepT <- i2_i3$markers %in% rownames(cnts_mat)
if (sum(!keepT) > 0) {
    i2_i3 <- i2_i3[keepT,]
}

# Prepare Input 
N <- ncol(cnts_mat)
K <- nlevels(i2_i3$status)
S <- nrow(i2_i3)
P <- nrow(cnts_mat)
#
class.names <- levels(i2_i3$status)
i2_i3$status <- as.numeric(i2_i3$status)

# Provide warning if cnts_mat seems non-normalized
cnts_mat.mean <- round(mean(cnts_mat),2)
if (abs(cnts_mat.mean) >1) {
    isnorm <- " <- check feature centering!"
    cnts_mat.sd <- round(stats::sd(cnts_mat),2)
    warning(paste0("emat mean=", cnts_mat.mean, "; sd=", cnts_mat.sd, isnorm),
            call.=FALSE)
}

# Output classification overview
feat.class <- paste(range(table(i2_i3$status)),collapse = "-")
# matching vector for cnts_mat and markers df
mm <- match(i2_i3$markers, rownames(cnts_mat),nomatch = 0)
if (!all(rownames(cnts_mat)[mm] == i2_i3$markers)) {
    stop("error matching probes, check rownames(cnts_mat) and i2_i3$markers")
}

# if features are reused across classes sample(..., replace=TRUE)
pReplace <- length(i2_i3$markers) > length(unique(i2_i3$markers))

# Prepare Templates
tmat <- matrix(rep(i2_i3$status,K), ncol = K) # templates matrix
for (k in seq_len(K)) tmat[,k] <- as.numeric(tmat[,k] == k)
if (K == 2) tmat[tmat==0] <- -1

# Compute distance
sim_fn <- function(x,y) corCosine(x,y)
simToDist <- function(cos.sim) sqrt(1/2 * (1-cos.sim))

# Ntp function 
 ntp_fn <- function(n) {
        # sample-templates correlations
        n.sim <- as.vector(sim_fn(cnts_mat[mm,n, drop = FALSE],tmat))

        # matrix(emat[,n][sample.int... makes permuted matrix
        # apply(simFun... calculates correlation and return max value

        n.sim.perm.max <- apply(sim_fn(
                matrix(cnts_mat[,n][sample.int(P, S*nPerm, replace=TRUE)],
                       ncol = nPerm), tmat), 1, max)

        n.ntp <- which.max(n.sim)
        # estimate p-value
        n.sim.ranks <- rank(-c(n.sim[n.ntp],(n.sim.perm.max)))
        n.pval <- n.sim.ranks[1]/length(n.sim.ranks)

        # return results
        return(c(
            n.ntp,                # predicted class
            simToDist(n.sim),     # distance to all templates
            n.pval))              # p-value
    }

####### OPTION 1: if not setting a seed and ncores  - enforce PARALLELIZED processing
# paralellized prediction
# About nCores:
# If nCores is equal to 0 (nCores == 0 is TRUE), it means that the user hasn't specified the number of CPU cores explicitly.
# In this case, the code executes parallel::detectCores(). detectCores() is a function from the "parallel" package in R. It automatically detects the number of available CPU cores on the system and returns this value.
# If nCores is not equal to 0 (i.e., the user has specified a non-zero value), the code simply returns the user-specified value stored in nCores.
## If not setting a seed and ncores  
nPerm <- 1000 # specify desired number of permutations
funVal <- vector(mode = "numeric", length = 2+K)
nCores <-  ifelse(nCores == 0,
                    parallel::detectCores(),
                    nCores)
options(mc.cores = nCores)

# avoids un-neccessary dispatches but
# memory and system.time scales with nPerm
nParts <- split(seq_len(N), cut(seq_len(N), nCores, labels=FALSE))

res3 <- parallel::mclapply(nParts, function(n)
    vapply(n, ntp_fn, funVal))
res3 <- data.frame(t(do.call(cbind, res3)))

# Prepare Output
colnames(res3) <- c("prediction",
                       paste0("d.",class.names),
                      "p.value")

res3$prediction <- factor(class.names[res3$prediction], levels = class.names)
rownames(res3) <- colnames(cnts_mat)
res3$p.value[res3$p.value < 1/nPerm] <- 1/nPerm
res3$FDR <- stats::p.adjust(res3$p.value, "fdr")

# returnOutput 
res3
```

####### OPTION2: if setting a seed and ncores - enforce SERIAL processing 
# Serialized prediction
nPerm <- 1000
set.seed(7)
nCores <- 1 # Always set ncores to 1 if seed is set
#
res2 <- lapply (seq_len(N), ntp_fn)
res2 <- data.frame(do.call(rbind,res2))

# Prepare Output
colnames(res2) <- c("prediction",
                       paste0("d.",class.names),
                      "p.value")
#
res2$prediction <- factor(class.names[res2$prediction], levels = class.names)
rownames(res2) <- colnames(cnts_mat)
res2$p.value[res2$p.value < 1/nPerm] <- 1/nPerm
res2$FDR <- stats::p.adjust(res2$p.value, "fdr")

# returnOutput 
res2

# Add iCMS status to metadata
Meta_corrected <- Meta[Meta$RNA.Tumor.Sample.Barcode %in% rownames(res2),] #or res3
m = match(Meta_corrected$RNA.Tumor.Sample.Barcode, rownames(res2))
Meta_corrected$iCMS_pred <- res2$prediction[m]
